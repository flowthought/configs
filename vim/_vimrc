" Remap jk to ESC
inoremap jk <ESC>

" Vim-Plug(junegunn/vim-plug). Run the following on windows. Not checking this in because it needs to be updated.
" md ~\vimfiles\autoload
" $uri = 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
" (New-Object Net.WebClient).DownloadFile($uri, $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath("~\vimfiles\autoload\plug.vim"))

" Specify a directory for plugins (for Neovim: ~/.local/share/nvim/plugged)
call plug#begin('~/_vim/plugged')

" NERDtree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Themes
Plug 'sickill/vim-monokai'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'

" Git Plugins
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Syntax
Plug 'cespare/vim-toml'

" Extensions
Plug 'ctrlpvim/ctrlp.vim'
Plug 'takac/vim-hardtime'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'justinmk/vim-sneak'

" Cool status bar plugin. Preferably keep this at the end since it can depend on other plugins
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Initialize plugin system
call plug#end()

" When vim-airline is enabled, it shows the mode in the status bar. Disabling default mode indicator in this case
set noshowmode

" Nerd Tree show
map <C-n> :NERDTreeToggle<CR>

colorscheme molokai
filetype plugin indent on
syntax on
set encoding=utf-8

" Status line customizations
set laststatus=2

" To use system clipboard. Use unnamedplus in Linux
set clipboard=unnamed

" Show line numbers
set number

" Backspace through everything
set backspace=indent,eol,start
" Tilde as operator
" set tildeop

" Tabs as four spaces[1]
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab

" Highlight search results by default. Use :noh to temporarily turn off
" highlighting within search results until the next search is performed.
nnoremap <F2> :set hlsearch!<CR>
" Incremental search
set incsearch

" Set max tab pages (up from 10)
set tabpagemax=15

" Set smart case search[2]. Will search insensitive unless there is a capital
" letter in the search string
set ignorecase
set smartcase

" Allow switching from modified buffers, but confirm on buffer delete
set hidden
set confirm

" Show line/column information
set ruler

" More natural window splits
set splitbelow
set splitright

" Set the working directory to wherever the open file lives
" set autochdir

" Turn on wildmenu for tab completion in Ex commands
set wildmenu
set wildmode=full
" Don't offer to open certain files/directories
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.pdf
" set wildignore+=node_modules/*,bower_components/*

" For gitgutter to update quicker
set updatetime=1000

" Frequent personal shortcuts (mostly leader based)
let mapleader = "\<Space>"

" Code search and lookup options
" Search for tags file in all ancestors
set tags=./tags;
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor\ --vimgrep\ $* grepformat=%f:%l:%c:%m

  " Use ag for ctrlp file listing
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" Customized grep command to bypass output window and show quickfix list
command! -nargs=+ Lookup execute 'silent grep! <args>' | copen

" Create mapping for '%%' to be expanded to current file's directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Targeted edits [3]
nnoremap <leader>e :e<space>
nnoremap <leader>f :find<space>
nnoremap <leader>or :e ./**/*
nnoremap <leader>oh :e %<.h<CR>
nnoremap <leader>oc :e %<.cpp<CR>
nnoremap <leader>oo :e! %<CR>
nnoremap <leader>on :new <bar> only <CR>
nnoremap <leader>vv :e $MYVIMRC<CR>
nnoremap <leader>vl :source $MYVIMRC<CR>

" Diffs
set diffopt+=vertical
nnoremap <leader>od :windo diffthis<CR>
nnoremap <leader>oD :windo diffoff<CR>

" Window management
nnoremap <leader>1 <C-w>o
nnoremap <leader>2 <C-w>v
nnoremap <leader>3 <C-w>s

" Buffer management
" nnoremap <leader>b :b<space>
nnoremap <leader>] :bn<CR>
nnoremap <leader>[ :bp<CR>
nnoremap <leader>d :bp <bar> bd #<CR>
" nnoremap <leader>d :bd<CR>

" Tab management
nnoremap <C-Tab> gt
nnoremap <C-S-Tab> gT
nnoremap <leader>n :tabnew %<CR>
nnoremap <leader>td :tabclose<CR>
nnoremap <leader>to :tabnew<space>

" File management
nnoremap <leader>w :w<CR>

" Search for word under cursor. Use appropriate shortcut
nnoremap <leader>lw :execute 'Lookup '.expand('<cword>').' '.getcwd()
nnoremap <leader>ll :Lookup<space>
nnoremap <F3> :cp<CR>
nnoremap <F4> :cn<CR>

" Use the '.' command as a verb in visual mode
vnoremap . :'<,'>normal.<CR>
" Use the '&' command to repeat the last substitution with flags
vnoremap & :&&<CR>
nnoremap & :&&<CR>

" Git (fugitive) quick shortcuts
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gc :Gcommit<space>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gm :Gmove<CR>
nnoremap <leader>gx :Gremove<CR>

" Move by display lines instead of actual lines
nnoremap j gj
nnoremap k gk
nnoremap 0 g0
nnoremap $ g$
nnoremap ^ g^

vnoremap j gj
vnoremap k gk
vnoremap 0 g0
vnoremap $ g$
vnoremap ^ g^

onoremap j gj
onoremap k gk
onoremap 0 g0
onoremap $ g$
onoremap ^ g^

nnoremap g$ $
nnoremap g0 0
nnoremap g^ ^
nnoremap gj j
nnoremap gk k

vnoremap g$ $
vnoremap g0 0
vnoremap g^ ^
vnoremap gj j
vnoremap gk k

onoremap g$ $
onoremap g0 0
onoremap g^ ^
onoremap gj j
onoremap gk k

" Filetype preferences
autocmd FileType markdown,python setlocal textwidth=80
autocmd FileType c,cpp,cs,java setlocal commentstring=//\ %s

" Enable tabline for vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline_powerline_fonts = 1
" let g:hardtime_default_on = 0

" Ctrlp: Search for a root marker upwards from current working directory
let g:ctrlp_working_path_mode = 'rw'
" Additional prioritized root markers (over .git, .hg, etc.) for CtrlP
" For some reason, it's not picking .git files in windows sometimes, adding here fixes it.
let g:ctrlp_root_markers = ['tags', '.ctrlproot', '.git']
" Store cache across sessions on disk for faster loading times
let g:ctrlp_clear_cache_on_exit = 0
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMRU<CR>

" Load machine specific options
if !empty(glob("~/_wvimrc"))
    source ~/_wvimrc
endif

" [1]: http://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim
" [2]: http://stackoverflow.com/questions/2287440/how-to-do-case-insensitive-search-in-vim
" [3]: http://vim.wikia.com/wiki/Easily_switch_between_source_and_header_file
